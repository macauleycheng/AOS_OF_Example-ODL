<?xml version="1.0" encoding="UTF-8"?>
<module name="opendaylight-inventory"
        xmlns="urn:ietf:params:xml:ns:yang:yin:1"
        xmlns:inv="urn:opendaylight:inventory"
        xmlns:ext="urn:opendaylight:yang:extension:yang-ext"
        xmlns:inet="urn:ietf:params:xml:ns:yang:ietf-inet-types">
  <namespace uri="urn:opendaylight:inventory"/>
  <prefix value="inv"/>
  <import module="yang-ext">
    <prefix value="ext"/>
    <revision-date date="2013-07-09"/>
  </import>
  <import module="ietf-inet-types">
    <prefix value="inet"/>
    <revision-date date="2010-09-24"/>
  </import>
  <revision date="2013-08-19">
    <description>
      <text>Initial revision of Inventory model</text>
    </description>
  </revision>
  <typedef name="support-type">
    <type name="enumeration">
      <enum name="native"/>
      <enum name="emulated"/>
      <enum name="not-supported"/>
    </type>
  </typedef>
  <typedef name="node-id">
    <type name="inet:uri"/>
    <description>
      <text>Identifier for a particular node. For example:

   myprotocol:&lt;unique_node_id&gt;

   myprotocol:12

It is a good practice to always lead with a scoping identifier.
In the example above the scoping was 'myprotocol'. In your app you
could use 'myapp' etc.</text>
    </description>
  </typedef>
  <typedef name="node-connector-id">
    <type name="inet:uri"/>
    <description>
      <text>Identifier for a particular node-connector. For example:

   myprotocol:&lt;unique_node_connector_id&gt;
   myprotocol:3

It is a good practice to always lead with a scoping identifier.
In the example above the scoping was 'myprotocol'. In your app you
could use 'myapp' etc.</text>
    </description>
  </typedef>
  <typedef name="node-ref">
    <type name="instance-identifier"/>
    <description>
      <text>A reference that points to an opendaylight-light:nodes/node in the data tree.</text>
    </description>
  </typedef>
  <typedef name="node-connector-ref">
    <type name="instance-identifier"/>
    <description>
      <text>A reference that points to an opendaylight-list:nodes/node/{node-id}/node-connector in the data tree.</text>
    </description>
  </typedef>
  <identity name="node-context">
    <description>
      <text>A node-context is a classifier for node elements which allows an RPC to provide a service on behalf of a particular element in the data tree.</text>
    </description>
  </identity>
  <identity name="node-connector-context">
    <description>
      <text>A node-connector-context is a classifier for node-connector elements which allows an RPC to provide a service on behalf of a particular element in the data tree.</text>
    </description>
  </identity>
  <identity name="node-type">
    <description>
      <text>A base identity definition which represents a generic node type and can be extended in other yang files.</text>
    </description>
  </identity>
  <identity name="node-connector-type">
    <description>
      <text>A base identity definition which represents a generic node connector type and can be extended in other yang files.</text>
    </description>
  </identity>
  <grouping name="node">
    <description>
      <text>Describes the contents of a generic node -
essentially an ID and a list of node-connectors.
Acts as an augmentation point where other yang files
 can add additional information.</text>
    </description>
    <leaf name="id">
      <type name="node-id"/>
      <description>
        <text>The unique identifier for the node.</text>
      </description>
    </leaf>
    <list name="node-connector">
      <key value="id"/>
      <description>
        <text>A list of node connectors that belong this node.</text>
      </description>
      <ext:context-instance context-type="node-connector-context"/>
      <uses name="node-connector"/>
    </list>
  </grouping>
  <grouping name="node-connector">
    <description>
      <text>Describes a generic node connector which consists of an ID.
Acts as an augmentation point where other yang files can
 add additional information.</text>
    </description>
    <leaf name="id">
      <type name="node-connector-id"/>
      <description>
        <text>The unique identifier for the node-connector.</text>
      </description>
    </leaf>
  </grouping>
  <grouping name="node-context-ref">
    <description>
      <text>A helper grouping which contains a reference to a node classified with a node-context. This allows RPCs in other yang files to refine their input to a particular node instance.</text>
    </description>
    <leaf name="node">
      <ext:context-reference context-type="node-context"/>
      <type name="node-ref"/>
      <description>
        <text>A reference to a particular node.</text>
      </description>
    </leaf>
  </grouping>
  <container name="nodes">
    <description>
      <text>The root container of all nodes.</text>
    </description>
    <list name="node">
      <key value="id"/>
      <ext:context-instance context-type="node-context"/>
      <description>
        <text>A list of nodes (as defined by the 'grouping node').</text>
      </description>
      <uses name="node"/>
    </list>
  </container>
  <notification name="node-updated">
    <status value="deprecated"/>
    <description>
      <text>A notification sent by someone who realized there was a modification to a node, but did not modify the data tree.
Describes that something on the node has been updated (including addition of a new node), but is for
whatever reason is not modifying the data tree.

Deprecated: If a process determines that a node was updated, then that
logic should update the node using the DataBroker directly. Listeners interested
update changes should register a data change listener for notifications on removals.</text>
    </description>
    <leaf name="node-ref">
      <ext:context-reference context-type="node-context"/>
      <description>
        <text>A reference to the node which changed.</text>
      </description>
      <type name="node-ref"/>
    </leaf>
    <uses name="node"/>
  </notification>
  <notification name="node-connector-updated">
    <status value="deprecated"/>
    <description>
      <text>A notification sent by someone who realized there was a modification to a node-connector, but did not modify the data tree.
Describes that something on the node-connector has been updated (including addition of a new node-connector), but is for
whatever reason is not modifying the data tree.

Deprecated: If a process determines that a node-connector was updated, then that
logic should update the node-connector using the DataBroker directly. Listeners interested
update changes should register a data change listener for notifications on removals.</text>
    </description>
    <leaf name="node-connector-ref">
      <ext:context-reference context-type="node-connector-context"/>
      <type name="node-connector-ref"/>
      <description>
        <text>A reference to the node-connector which changed.</text>
      </description>
    </leaf>
    <uses name="node-connector"/>
  </notification>
  <notification name="node-removed">
    <status value="deprecated"/>
    <description>
      <text>A notification sent by someone who realized there was a node was removed, but did not modify the data tree.
Describes that a node has been removed but is for
whatever reason is not modifying the data tree.

Deprecated: If a process determines that a node was removed, then that
logic should remove the node from the DataBroker directly. Listeners interested
in changes should register a data change listener for notifications on removals.</text>
    </description>
    <leaf name="node-ref">
      <description>
        <text>A reference to the node that was removed.</text>
      </description>
      <ext:context-reference context-type="node-context"/>
      <type name="node-ref"/>
    </leaf>
  </notification>
  <notification name="node-connector-removed">
    <status value="deprecated"/>
    <description>
      <text>A notification sent by someone who realized there was a node-connector was removed, but did not modify the data tree.
Describes that a node-connector has been removed but is for
whatever reason is not modifying the data tree.

Deprecated: If a process determines that a node-connector was removed, then that
logic should remove the node-connector from the DataBroker directly. Listeners interested
in changes should register a data change listener for notifications on removals.</text>
    </description>
    <leaf name="node-connector-ref">
      <description>
        <text>A reference to the node-connector that was removed.</text>
      </description>
      <ext:context-reference context-type="node-connector-context"/>
      <type name="node-connector-ref"/>
    </leaf>
  </notification>
</module>
